{"name":"TypeLess","tagline":"More code - Less typing","body":"###No dependencies | Portal library | Easy to extend with your own validations###\r\n\r\n###Available on nuget: PM> Install-Package TypeLess###\r\n\r\n\r\n**What problem/annoyance is this trying to solve**\r\n``` c#\r\npublic void Login(SomeDTO data) {\r\n    if (data == null) {\r\n        throw new ArgumentNullException(\"Data is required\");\r\n    }\r\n    \r\n    if (data.Email == null) {\r\n        throw new ArgumentNullException(\"Email is required\");\r\n    }\r\n    \r\n    if (NotValidEmail(data.Email)) {\r\n        throw new ArgumentException(\"Email is not valid\");\r\n    }\r\n    \r\n    if (data.Email.Length > 5) {\r\n        throw new ArgumentException(\"Email must be shorter than 6 characters\")\r\n    }\r\n    \r\n    ...\r\n}\r\n```\r\n\r\n####If you are like me then writing that is tedious!####\r\n\r\n**Would be easier to write this**\r\n``` c#\r\nusing TypeLess;\r\n...\r\npublic SomeMethod(SomeDTO input)\r\n{\r\n    input.If(\"Input\").IsNull.ThenThrow();\r\n    input.Email.If(\"Email\").IsNull.IsNotValidEmail.ThenThrow();\r\n    input.Name.If(\"Name\").IsNull.IsEmptyOrWhitespace.ThenThrow();\r\n    input.UserId.If(\"User id\").IsSmallerThan(0).ThenThrow();\r\n    \r\n    ...\r\n}\r\n```\r\n\r\n**Or if you prefer to put validation in the class where it belongs**\r\n``` c#\r\nusing TypeLess;\r\n...\r\npublic class SomeDTO {\r\n    public string Name { get; set; }\r\n    public string Email { get; set; }\r\n    public int UserId { get; set; }\r\n\r\n    public ObjectAssertion IsInvalid() {\r\n        return ObjectAssertion.New(\r\n            Name.If().IsNull.IsNotValidEmail,\r\n            Email.If().IsNull.IsEmptyOrWhitespace,\r\n            UserId.If().IsSmallerThan(0));\r\n    }\r\n}\r\n\r\n...\r\n\r\npublic void Login(SomeDTO input)\r\n{\r\n    input.If().IsInvalid.ThenThrow();\r\n}\r\n```\r\n####How about this case?####\r\n```\r\ns1.If(\"s1\").IsNull.ThenThrow();\r\ns2.If(\"s2\").IsNull.ThenThrow();\r\ns3.If(\"s3\").IsNull.ThenThrow();\r\n```\r\n**If you need to check the same predicates on multiple objects like above then you can do this**\r\n```\r\ns1.If(\"s1\").Or(s2, \"s2\").Or(s3, \"s3\").IsNull.ThenThrow().Otherwise(() => {...});\r\n```\r\n\r\n**If you need to you can also group different types like this**\r\n```\r\nstring s1 = \"some string\";\r\ndouble d1 = 0;\r\ns1.If(\"s1\").IsNull.Or(d1.If(\"d1\").IsGreaterThan(0)).ThenThrow();\r\n```\r\n\r\n**And of course you can use multiple checks as in the very unreal example below**\r\n```\r\nd1.If(\"1\").Or(d2, \"2\").Or(d3, \"3\").IsSmallerThan(5).IsGreaterThan(0).ThenThrow();\r\n```\r\n\r\n####And that is what you do with TypeLess! Nothing more, nothing (but hopefully) less####\r\n\r\n**Example of output:**\r\n``` c#\r\nstring email = \"some text\";\r\nemail.If(\"Email\")\r\n  .IsNull\r\n  .IsNotValidEmail\r\n  .IsLongerThan(5).ThenThrow();\r\n```\r\n\r\n- *Example exception debug: Email must be a valid email address and must be shorter than 6 characters at SomeMethod, line number 27 in file Asserts.cs*\r\n- *Example exception not debug: Email must be a valid email address and must be shorter than 6 characters*\r\n\r\n**or if the parameter name is not important in the exception output you can leave it out**\r\n``` c#\r\nemail.If().IsNull.IsNotValidEmail.ThenThrow();\r\n```\r\n\r\n**here is how you use custom error message (you can use &lt;name&gt; anywhere in the text to include the parameter name)**\r\n``` c#\r\nemail.If(\"email\").IsNull.IsNotValidEmail.ThenThrow(\"<name> was not a valid email address\");\r\n```\r\n\r\n**and of course you can throw custom exceptions**\r\n``` c#\r\nemail.If(\"email\").IsNull.IsNotValidEmail.ThenThrow<SomeException>(\"<name> was not a valid email address\");\r\n```\r\n\r\n####Use with normal if statement####\r\n``` c#\r\nvar precondition = email.If().IsNull.IsNotValidEmail;\r\nif (!precondition.True) {\r\n    //Get errors\r\n    string errors = precondition.ToString();\r\n}\r\n```\r\nAnother if statement example\r\n\r\n``` c#\r\nvar angle = 345;\r\n\r\nif (angle.If()\r\n .IsWithin(315, 360)\r\n .Or(angle).IsWithin(0, 45)\r\n .Or(angle).IsWithin(135, 225).True) \r\n{\r\n ...\r\n}\r\nelse {...}\r\n\r\nor this would produce the same results\r\n\r\nif (angle.If()\r\n .IsWithin(315, 360)\r\n .IsWithin(0, 45)\r\n .IsWithin(135, 225).True) \r\n{\r\n ...\r\n}\r\nelse {...}\r\n\r\nor\r\n\r\nangle.If()\r\n .IsWithin(315, 360)\r\n .IsWithin(0, 45)\r\n .IsWithin(135, 225).Then(a => {...}).Otherwise(a => {...});\r\n\r\n```\r\n####Custom validation with lambda expresions####\r\n``` c#\r\ndouble a=1.0,b=2.0,c=3.0;\r\na.If().IsFalse(x => x > b && x < c, \"a must be between b and c\").ThenThrow();\r\n```\r\n- *Example output: Double a must be between b and c*\r\n\r\n####Short circuit validation (default for isNull check)####\r\n``` c#\r\nstring email = \"some text\";\r\n  email.If(\"Email\")\r\n    .IsNotValidEmail.StopIfNotValid\r\n    .IsLongerThan(5).ThenThrow();\r\n```\r\n- *Example output: Email must be a valid email address*\r\n\r\n####Combine validations from multiple assertions with custom separator####\r\n``` c#\r\nDateTime d1 = new DateTime(2014,05,01);\r\nDateTime d2 = new DateTime(2014,05,10);\r\nstring s1 = \"abc\";\r\n\r\nvar ifDateNotValid = new DateTime(2014, 05, 24).If().IsNotWithin(d1, d2);\r\nvar ifStringNotValid = s1.If(\"abc\").IsShorterThan(4);\r\n\r\nifDateNotValid.Or(ifStringNotValid, \"<br />\").ThenThrow();\r\n```\r\n- *Example output: DateTime must be within 2014-05-01 00:00:00 and 2014-05-10 00:00:00 <br /> abc must be longer than 3 characters*\r\n\r\n####How to add your own validation code on top of TypeLess####\r\nAdding your own checks is easy. Just create an extension method for the assertion type you are interested in like this\r\n``` c#\r\npublic static class PersonalNumber\r\n{\r\n    public static IStringAssertion IsNotValidPersonalNumber(this IStringAssertionU source) {\r\n        source.Extend(x =>\r\n        {\r\n            return AssertResult.New(!Luhn.IsValid(x.ToIntArray()), Resources.IsNotValidPersonalNumber);\r\n        });\r\n        return (IStringAssertion)source;\r\n    }\r\n}\r\n```\r\nThis method extends the IStringAssertionU interface with a swedish personal number check for strings according to the\r\nLuhn algorithm. Note the U at the end of the interface and that it is not included in the return type. This is simply because the method should be available directly after the If() statement and not only after other assertions have been made. The Extend method will not show up in code completion but its there and it expects a function that receives the string (value) being checked and returns an AssertResult that takes the condition followed by the error message. Use &lt;name&gt; in the error message for replacement with parameter name\r\n\r\n**The following types can be extended**\r\n- ITimeSpanAssertionU / ITimeSpanAssertion\r\n- IStringAssertionU / IStringAssertion / IRegexAssertion\r\n- INumberAssertionU<T> / INumberAssertion<T>\r\n- INullableAssertionU<T> / INullableAssertion<T>\r\n- IMixedTypeAssertionU<T, U> / IMixedTypeAssertion<T, U>\r\n- IEnumerableAssertionU / IEnumerableAssertion\r\n- IDictionaryAssertionU<T1, T2> / IDictionaryAssertion<T1, T2>\r\n- IDateTimeAssertionU / IDateTimeAssertion\r\n- IClassAssertionU<T> / IClassAssertion<T>\r\n- IBoolAssertionU / IBoolAssertion\r\n- IAssertionU / IAssertion\r\n- IAssertionU<T> / IAssertion<T> / IAssertionOW<T>\r\n\r\n###Features:###\r\n- Chain validation checks \r\n- Short circuit validation \r\n- Built as portable library\r\n- Throw or get errors as text \r\n- Merge multiple property validations into a single validation message\r\n- Examines stack details to return row and file information when running in debug mode\r\n- Easy to extend. Its built on extension methods, add your own extensions to extend with new validations.\r\n- Throw your own exception types\r\n- Supports nullable types\r\n- Chain complex property validations\r\n- Re-use predicates on other objects\r\n- Can return number of validation errors\r\n- Kind of fluent...\r\n- Supports English and Swedish error messages (controlled by current culture) \r\n\r\n###Available (predefined) checks:###\r\n- IsNull\r\n- IsEmpty\r\n- IsTrue\r\n- IsFalse\r\n- IsEmpty\r\n- ContainsLessThan x elements\r\n- ContainsMoreThan x elements\r\n- IsZero\r\n- IsNotEqualTo\r\n- IsEqualTo\r\n- IsSmallerThan\r\n- IsGreaterThan\r\n- IsPositive\r\n- IsNegative\r\n- IsEmptyOrWhitespace\r\n- IsNotValidEmail\r\n- IsShorterThan\r\n- IsLongerThan\r\n- DoesNotContainAlphaChars\r\n- DoesNotContainDigit\r\n- IsNotWithin \r\n- DoesNotContain text\r\n- DoesNotStartWith\r\n- DoesNotEndWith\r\n- SameDayAs + Not\r\n- SameMonthAs + Not\r\n- SameYearAs + Not\r\n- SameHourAs + Not\r\n- SameMinuteAs + Not\r\n- SameSecondAs + Not\r\n- SameWeekDayAs + Not\r\n- Match + Not (regex matching)\r\n- IsValidUrl + Not\r\n- ContainsKey + Not\r\n\r\nExtensions\r\n- Shipping/IsValidIMO\r\n- Sweden/IsValidPersonalNumber\r\n- Us/IsValidPhoneNumber\r\n- Us/IsValidSocialSecurityNumber\r\n- Us/IsValidZipCode\r\n\r\n###The framework target profile supports###\r\n- .Net\r\n- Windows 8\r\n- Windows Phone 8.1\r\n","google":"UA-42813401-2","note":"Don't delete this file! It's used internally to help with page regeneration."}