<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BoolIsFalse" xml:space="preserve">
    <value>&lt;name&gt; must be true</value>
  </data>
  <data name="BoolIsTrue" xml:space="preserve">
    <value>&lt;name&gt; must be false</value>
  </data>
  <data name="ContainsKey" xml:space="preserve">
    <value>&lt;name&gt; must not contain key {0}</value>
  </data>
  <data name="ContainsLessThan" xml:space="preserve">
    <value>&lt;name&gt; must contain more than {0} items</value>
  </data>
  <data name="ContainsMoreThan" xml:space="preserve">
    <value>&lt;name&gt; must contain less than {0} items</value>
  </data>
  <data name="DoesNotContain" xml:space="preserve">
    <value>&lt;name&gt; must contain text {0}</value>
  </data>
  <data name="DoesNotContainAlphaChars" xml:space="preserve">
    <value>&lt;name&gt; must contain alpha numeric characters</value>
  </data>
  <data name="DoesNotContainDigit" xml:space="preserve">
    <value>&lt;name&gt; must contain at least 1 digit</value>
  </data>
  <data name="DoesNotContainKey" xml:space="preserve">
    <value>&lt;name&gt; must contain key {0}</value>
  </data>
  <data name="DoesNotEndWith" xml:space="preserve">
    <value>&lt;name&gt; must end with text {0}</value>
  </data>
  <data name="DoesNotMatch" xml:space="preserve">
    <value>&lt;name&gt; must match pattern {0}</value>
  </data>
  <data name="DoesNotStartWith" xml:space="preserve">
    <value>&lt;name&gt; must start with text {0}</value>
  </data>
  <data name="IsAfter" xml:space="preserve">
    <value>&lt;name&gt; must be smaller than {0}</value>
  </data>
  <data name="IsBefore" xml:space="preserve">
    <value>&lt;name&gt; must be larger than {0}</value>
  </data>
  <data name="IsEmpty" xml:space="preserve">
    <value>&lt;name&gt; must not be empty</value>
  </data>
  <data name="IsEqualTo" xml:space="preserve">
    <value>&lt;name&gt; must not be equal to {0}</value>
  </data>
  <data name="IsGreaterThan" xml:space="preserve">
    <value>&lt;name&gt; must be smaller than {0}</value>
  </data>
  <data name="IsLongerThan" xml:space="preserve">
    <value>&lt;name&gt; must be shorter than {0} characters</value>
  </data>
  <data name="IsNegative" xml:space="preserve">
    <value>&lt;name&gt; must be zero or positive</value>
  </data>
  <data name="IsNotEqualTo" xml:space="preserve">
    <value>&lt;name&gt; must be equal to {0}</value>
  </data>
  <data name="IsNotNull" xml:space="preserve">
    <value>&lt;name&gt; must be null</value>
  </data>
  <data name="IsNotValidEmail" xml:space="preserve">
    <value>&lt;name&gt; must be a valid email address</value>
  </data>
  <data name="IsNotValidImoNr" xml:space="preserve">
    <value>&lt;name&gt; must be a valid IMO number</value>
  </data>
  <data name="IsNotValidISBN" xml:space="preserve">
    <value>&lt;name&gt; must be a valid ISBN</value>
  </data>
  <data name="IsNotValidPersonalNumber" xml:space="preserve">
    <value>&lt;name&gt; must be a valid personal number</value>
  </data>
  <data name="IsNotValidPhoneNumber" xml:space="preserve">
    <value>&lt;name&gt; must be a valid phone number</value>
  </data>
  <data name="IsNotValidSocialSecurityNumber" xml:space="preserve">
    <value>&lt;name&gt; must be a valid social security number</value>
  </data>
  <data name="IsNotValidUrl" xml:space="preserve">
    <value>&lt;name&gt; must be a valid URL</value>
  </data>
  <data name="IsNotValidZipCode" xml:space="preserve">
    <value>&lt;name&gt; must be a valid zip code</value>
  </data>
  <data name="IsNotWithin" xml:space="preserve">
    <value>&lt;name&gt; must be within {0} and {1}</value>
  </data>
  <data name="IsNull" xml:space="preserve">
    <value>&lt;name&gt; is required</value>
  </data>
  <data name="IsPositive" xml:space="preserve">
    <value>&lt;name&gt; must be zero or negative</value>
  </data>
  <data name="IsShorterThan" xml:space="preserve">
    <value>&lt;name&gt; must be longer than {0} characters</value>
  </data>
  <data name="IsSmallerThan" xml:space="preserve">
    <value>&lt;name&gt; must be greater than {0}</value>
  </data>
  <data name="IsValidISBN" xml:space="preserve">
    <value>&lt;name&gt; must not be a ISBN</value>
  </data>
  <data name="IsValidPersonalNumber" xml:space="preserve">
    <value>&lt;name&gt; must not be a valid personal number</value>
  </data>
  <data name="IsValidPhoneNumber" xml:space="preserve">
    <value>&lt;name&gt; must not be a valid phone number</value>
  </data>
  <data name="IsValidSocialSecurityNumber" xml:space="preserve">
    <value>&lt;name&gt; must not be a social security number</value>
  </data>
  <data name="IsValidUrl" xml:space="preserve">
    <value>&lt;name&gt; must not be a URL</value>
  </data>
  <data name="IsValidZipCode" xml:space="preserve">
    <value>&lt;name&gt; must not be a zip code</value>
  </data>
  <data name="IsWithin" xml:space="preserve">
    <value>&lt;name&gt; must not be within {0} and {1}</value>
  </data>
  <data name="IsZero" xml:space="preserve">
    <value>&lt;name&gt; must be non zero</value>
  </data>
  <data name="Match" xml:space="preserve">
    <value>&lt;name&gt; must not match pattern {0}</value>
  </data>
  <data name="NotSameDayAs" xml:space="preserve">
    <value>&lt;name&gt; must be on same day as {0}</value>
  </data>
  <data name="NotSameHourAs" xml:space="preserve">
    <value>&lt;name&gt; must be on same hour as {0}</value>
  </data>
  <data name="NotSameMinuteAs" xml:space="preserve">
    <value>&lt;name&gt; must be on same minute as {0}</value>
  </data>
  <data name="NotSameMonthAs" xml:space="preserve">
    <value>&lt;name&gt; must be on same month as {0}</value>
  </data>
  <data name="NotSameSecondAs" xml:space="preserve">
    <value>&lt;name&gt; must be on same second as {0}</value>
  </data>
  <data name="NotSameWeekDayAs" xml:space="preserve">
    <value>&lt;name&gt; must be on same week day as {0}</value>
  </data>
  <data name="NotSameYearAs" xml:space="preserve">
    <value>&lt;name&gt; must be on same year as {0}</value>
  </data>
  <data name="SameDayAs" xml:space="preserve">
    <value>&lt;name&gt; must not be on same day as {0}</value>
  </data>
  <data name="SameHourAs" xml:space="preserve">
    <value>&lt;name&gt; must not be on same hour as {0}</value>
  </data>
  <data name="SameMinuteAs" xml:space="preserve">
    <value>&lt;name&gt; must not be on same minute as {0}</value>
  </data>
  <data name="SameMonthAs" xml:space="preserve">
    <value>&lt;name&gt; must not be on same month as {0}</value>
  </data>
  <data name="SameSecondAs" xml:space="preserve">
    <value>&lt;name&gt; must not be on same second as {0}</value>
  </data>
  <data name="SameWeekDayAs" xml:space="preserve">
    <value>&lt;name&gt; must not be on same week day as {0}</value>
  </data>
  <data name="SameYearAs" xml:space="preserve">
    <value>&lt;name&gt; must not be on same year as {0}</value>
  </data>
  <data name="TimeSpanIsLongerThan" xml:space="preserve">
    <value>&lt;name&gt; must be shorter than {0:c}</value>
  </data>
  <data name="TimeSpanIsShorterThan" xml:space="preserve">
    <value>&lt;name&gt; must be longer than {0:c}</value>
  </data>
  <data name="ContainsItems" xml:space="preserve">
    <value>&lt;name&gt; must not contain {0}</value>
  </data>
  <data name="DoesNotContainItems" xml:space="preserve">
    <value>&lt;name&gt; must contain {0}</value>
  </data>
  <data name="IsNotValidSwiftCode" xml:space="preserve">
    <value>&lt;name&gt;must be a valid Swift code</value>
  </data>
  <data name="IsNotPartOf" xml:space="preserve">
    <value>Collection must contain &lt;name&gt;</value>
  </data>
  <data name="IsPartOf" xml:space="preserve">
    <value>Collection must not contain &lt;name&gt;</value>
  </data>
</root>